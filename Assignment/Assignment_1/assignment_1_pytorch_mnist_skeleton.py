# -*- coding: utf-8 -*-
"""Assignment_1_Pytorch_MNIST.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i9KpbQyFU4zfq8zLLns8a2Kd8PRMGsaZ

Overall structure:

1) Set Pytorch metada
- seed
- tensorflow output
- whether to transfer to gpu (cuda)

2) Import data
- download data
- create data loaders with batchsie, transforms, scaling

3) Define Model architecture, loss and optimizer

4) Define Test and Training loop
    - Train:
        a. get next batch
        b. forward pass through model
        c. calculate loss
        d. backward pass from loss (calculates the gradient for each parameter)
        e. optimizer: performs weight updates

5) Perform Training over multiple epochs:
    Each epoch:
    - call train loop
    - call test loop

Acknowledgments:https://github.com/motokimura/pytorch_tensorboard/blob/master/main.py
"""

import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
from torchvision import datasets, transforms

from torch.utils.tensorboard import SummaryWriter
from datetime import datetime
import os
from pathlib import Path

batch_size = 64
test_batch_size = 1000
epochs = 10
lr = 0.01
try_cuda = True
seed = 1000
logging_interval = 10 # how many batches to wait before logging
logging_dir = None

# 1) setting up the logging
# [inset-code: set up logging]
now = datetime.now().strftime("%Y%m%d-%H%M%S")
log_dir = Path(logging_dir or f'runs/{now}')
log_dir.mkdir(parents=True, exist_ok=True)
writer = SummaryWriter(log_dir=str(log_dir))

#deciding whether to send to the cpu or not if available
if torch.cuda.is_available() and try_cuda:
    cuda = True
    torch.cuda.mnaual_seed(seed)
else:
    cuda = False
    torch.manual_seed(seed)

# Setting up data
transform=transforms.Compose([
            transforms.ToTensor(),
            transforms.Normalize((0.01307,), (0.3081,))
])

train_loader = torch.utils.data.DataLoader(
    datasets.MNIST('./data', train=True, download=True, transform=transform),
    batch_size=batch_size, shuffle=True)

test_loader = torch.utils.data.DataLoader(
    datasets.MNIST('./data', train=False, download=True, transform=transform),
    batch_size=test_batch_size, shuffle=False)


# Defining Architecture,loss and optimizer
class Net(nn.Module):
    def __init__(self):

        super(Net, self).__init__()
        self.conv1 = nn.Conv2d(1, 10, kernel_size=5)
    self.conv2 = nn.Conv2d(10, 20, kernel_size=5)
    self.conv2_drop = nn.Dropout2d()
    self.fc1 = nn.Linear(320, 50)
    self.fc2 = nn.Linear(50, 10)


    def forward(self, x):

        x = F.relu(F.max_pool2d(self.conv1(x), 2))
        x = F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))
        x = x.view(-1, 320)
        x = F.relu(self.fc1(x))
        x = F.dropout(x, training=self.training)
        x = self.fc2(x)
        x = F.softmax(x, dim=1)


        return x

model = Net()
if cuda:
    model.cuda()

optimizer = optim.Adam(model.parameters(), lr=lr)



# Defining the test and trainig loops
eps=1e-13

# def train(epoch): IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII
#     model.train()

#     #criterion = nn.CrossEntropyLoss()
#     criterion = [inset-code]

#     for batch_idx, (data, target) in enumerate(train_loader):
#         if cuda:
#             data, target = data.cuda(), target.cuda()

#         optimizer.[inset-code]
#         output = [inset-code]
#         loss = criterion(torch.log(output+eps), target) # = sum_k(-t_k * log(y_k))
#         loss[inset-code]
#         optimizer[inset-code]

#         if batch_idx % logging_interval == 0:
#             [inset-code: print and log the performance]

#     # Log model parameters to TensorBoard at every epoch
#     for name, param in model.named_parameters():
#         layer, attr = os.path.splitext(name)
#         attr = attr[1:]
#         writer.add_histogram(
#             f'{layer}/{attr}',
#             param.clone().cpu().data.numpy(),
#             n_iter)

# Training loop with logging
def train(epoch):
    model.train()  # Set model to training mode
    criterion = nn.NLLLoss()  # Loss function: Negative Log-Likelihood Loss

    for batch_idx, (data, target) in enumerate(train_loader):
        if cuda:
            data, target = data.cuda(), target.cuda()  # Move data to GPU if available

        optimizer.zero_grad()  # Clear gradients from the last iteration
        output = model(data)   # Forward pass
        loss = criterion(torch.log(output + eps), target)  # Calculate the loss with added small epsilon to avoid log(0)
        loss.backward()  # Backpropagation to calculate gradients
        optimizer.step()  # Update weights

        # Print and log the loss at regular intervals
        if batch_idx % logging_interval == 0:
            print(f'Train Epoch: {epoch} [{batch_idx * len(data)}/{len(train_loader.dataset)} '
                  f'({100. * batch_idx / len(train_loader):.0f}%)]\tLoss: {loss.item():.6f}')
            
            # Log the training loss to TensorBoard
            writer.add_scalar('training loss', loss.item(), epoch * len(train_loader) + batch_idx)

    # Log model parameters (weights, biases) to TensorBoard at every epoch
    for name, param in model.named_parameters():
        layer, attr = os.path.splitext(name)
        attr = attr[1:]  # Remove the leading '.'
        writer.add_histogram(f'{layer}/{attr}', param.clone().cpu().data.numpy(), epoch)




# def test(epoch):
#     model.eval()
#     test_loss = 0
#     correct = 0
#     #criterion = nn.CrossEntropyLoss()

#     #criterion = nn.CrossEntropyLoss(size_average = False)
#     criterion = nn.NLLLoss(size_average = False)

#     for data, target in test_loader:
#         if cuda:
#             data, target = data.cuda(), target.cuda()

#         output = model(data)

#         test_loss += criterion(torch.log(output+eps), target,).item() # sum up batch loss (later, averaged over all test samples)
#         pred = [inset-code] # get the index of the max log-probability
#         correct += [inset-code]

#     test_loss /= len(test_loader.dataset)
#     test_accuracy = 100. * correct / len(test_loader.dataset)
#     [inset-code: print the performance]

#     # Log test/loss and test/accuracy to TensorBoard at every epoch
#     n_iter = epoch * len(train_loader)
#     [inset-code: log the performance]

def test(epoch):
    model.eval()  # Set model to evaluation mode
    test_loss = 0
    correct = 0
    criterion = nn.NLLLoss(size_average=False)  # Loss function for testing

    with torch.no_grad():  # Disable gradient calculation for inference
        for data, target in test_loader:
            if cuda:
                data, target = data.cuda(), target.cuda()  # Move data to GPU if available

            output = model(data)  # Forward pass
            test_loss += criterion(torch.log(output + eps), target).item()  # Calculate and accumulate test loss
            pred = output.argmax(dim=1, keepdim=True)  # Get the index of the max log-probability
            correct += pred.eq(target.view_as(pred)).sum().item()  # Count correct predictions

    test_loss /= len(test_loader.dataset)  # Average loss over all test samples
    accuracy = 100. * correct / len(test_loader.dataset)

    # Print test performance
    print(f'\nTest set: Average loss: {test_loss:.4f}, Accuracy: {correct}/{len(test_loader.dataset)} '
          f'({accuracy:.0f}%)\n')

    # Log test loss and accuracy to TensorBoard
    writer.add_scalar('test loss', test_loss, epoch)
    writer.add_scalar('test accuracy', accuracy, epoch)


# Training loop

# [inset-code: running test and training over epoch]
for epoch in range(1, epochs + 1):
    train(epoch)
    test(epoch)

writer.close()

# Commented out IPython magic to ensure Python compatibility.
"""
#https://stackoverflow.com/questions/55970686/tensorboard-not-found-as-magic-function-in-jupyter

#seems to be working in firefox when not working in Google Chrome when running in Colab
#https://stackoverflow.com/questions/64218755/getting-error-403-in-google-colab-with-tensorboard-with-firefox


# %load_ext tensorboard
# %tensorboard --logdir [dir]

"""